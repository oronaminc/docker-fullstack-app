[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/reportWebVitals.js":"3","/app/src/Example.tsx":"4","/app/src/AreaChart.tsx":"5","/app/src/data/data.js":"6","/app/src/modal.tsx":"7"},{"size":712,"mtime":1609987981496,"results":"8","hashOfConfig":"9"},{"size":12140,"mtime":1612331595744,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1607935199018,"results":"11","hashOfConfig":"9"},{"size":7030,"mtime":1610513038014,"results":"12","hashOfConfig":"9"},{"size":2617,"mtime":1610513860360,"results":"13","hashOfConfig":"9"},{"size":1332,"mtime":1609378654883,"results":"14","hashOfConfig":"15"},{"size":913,"mtime":1609397069766,"results":"16","hashOfConfig":"15"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1dlnep4",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33","usedDeprecatedRules":"34"},"1ty4zt2",{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/app/src/index.js",[],["37","38"],"/app/src/App.js",[],"/app/src/reportWebVitals.js",[],"/app/src/Example.tsx",["39","40","41"],"import React, { useRef, useState, useMemo } from 'react';\nimport { scaleTime, scaleLinear } from '@visx/scale';\nimport appleStock, { AppleStock } from '@visx/mock-data/lib/mocks/appleStock';\nimport { Brush } from '@visx/brush';\nimport { Bounds } from '@visx/brush/lib/types';\nimport BaseBrush, { BaseBrushState, UpdateBrush } from '@visx/brush/lib/BaseBrush';\nimport { PatternLines } from '@visx/pattern';\nimport { LinearGradient } from '@visx/gradient';\nimport { max, extent } from 'd3-array';\n// import { dto } from './dto';\nimport data, {dto} from './data/data';\nimport AreaChart from './AreaChart';\nimport {Button} from 'react-bootstrap';\n\n// Initialize some variables\nlet stock = appleStock.slice(1000);\n// let stock: Array<dto> = [{'close':0,'date':new Date().toISOString()}];\n// stock = data;\nconst brushMargin = { top: 10, bottom: 15, left: 50, right: 20 };\nconst chartSeparation = 30;\nconst PATTERN_ID = 'brush_pattern';\nconst GRADIENT_ID = 'brush_gradient';\n// export const accentColor = '#f6acc8';\n// export const background = '#584153';\n// export const background2 = '#af8baf';\nexport const accentColor = '#004d7a';\nexport const background = '#008793';\nexport const background2 = '#A8EB12';\nconst selectedBrushStyle = {\n  fill: `url(#${PATTERN_ID})`,\n  stroke: 'white',\n};\n\n// accessors\n// const getDate2 = (d: AppleStock) => new Date(d.date);\n// const getStockValue2 = (d: AppleStock) => d.close;\nconst dd = {'close':0,'date':new Date().toISOString()};\nlet getStockValue = (d: dto) => d.close;\nlet getDate = (d: dto) => new Date(d.date);\n\nexport type BrushProps = {\n  width: number;\n  height: number;\n  test: Array<dto>;\n  margin?: { top: number; right: number; bottom: number; left: number };\n  compact?: boolean;\n};\n\n\nfunction BrushChart({\n  compact = false,\n  width,\n  height,\n  test, //= [{'close':0,'date':new Date().toISOString()}],\n  margin = {\n    top: 20,\n    left: 50,\n    bottom: 20,\n    right: 20,\n  },\n}: BrushProps) {\n  \n  // const getDate = (d: dto) => new Date(d.date);\n  // const getStockValue = (d: dto) => d.time;\n  if(test.length !== 0) {\n    stock = test;  \n  }\n  const brushRef = useRef<BaseBrush | null>(null);\n  const [filteredStock, setFilteredStock] = useState(stock);\n  const [originStock, setOriginStock] = useState(stock);\n  \n\n  const onBrushChange = (domain: Bounds | null) => {\n    if (!domain) return;\n    const { x0, x1, y0, y1 } = domain;\n    const stockCopy = stock.filter(s => {\n      const x = getDate(s).getTime();\n      const y = getStockValue(s);\n      return x > x0 && x < x1 && y > y0 && y < y1;\n    });\n    setFilteredStock(stockCopy);\n    // setOriginStock(stock);    \n  };\n\n  const innerHeight = height - margin.top - margin.bottom;\n  const topChartBottomMargin = compact ? chartSeparation / 2 : chartSeparation + 10;\n  const topChartHeight = 0.8 * innerHeight - topChartBottomMargin;\n  const bottomChartHeight = innerHeight - topChartHeight - chartSeparation;\n\n  // bounds\n  const xMax = Math.max(width - margin.left - margin.right, 0);\n  const yMax = Math.max(topChartHeight, 0);\n  const xBrushMax = Math.max(width - brushMargin.left - brushMargin.right, 0);\n  const yBrushMax = Math.max(bottomChartHeight - brushMargin.top - brushMargin.bottom, 0);\n\n  // scales\n  const dateScale = useMemo(\n    () =>\n      scaleTime<number>({\n        range: [0, xMax],\n        domain: extent(filteredStock, getDate) as [Date, Date],\n      }),\n    [xMax, filteredStock],\n  );\n  const stockScale = useMemo(\n    () =>\n      scaleLinear<number>({\n        range: [yMax, 0],\n        domain: [0, max(filteredStock, getStockValue) || 0],\n        nice: true,\n      }),\n    [yMax, filteredStock],\n  );\n  const brushDateScale = useMemo(\n    () =>\n      scaleTime<number>({\n        range: [0, xBrushMax],\n        domain: extent(originStock, getDate) as [Date, Date],\n      }),      \n    [xBrushMax, originStock],\n  );\n  const brushStockScale = useMemo(\n    () =>\n      scaleLinear({\n        range: [yBrushMax, 0],\n        domain: [0, max(originStock, getStockValue) || 0],\n        nice: true,\n      }),\n    [yBrushMax, originStock],\n  );\n\n  const initialBrushPosition = useMemo(\n    () => ({\n      start: { x: brushDateScale(getDate(stock[stock.length-3])) },\n      end: { x: brushDateScale(getDate(stock[stock.length-1])) },\n    }),\n    [brushDateScale],\n  );\n\n  // event handlers\n  const handleClearClick = () => {\n    if (brushRef?.current) {\n      setFilteredStock(stock);\n      setOriginStock(stock);\n      brushRef.current.reset();\n    }\n  };\n\n  const handleResetClick = () => {\n    setFilteredStock(stock);\n    setOriginStock(stock);\n    if (brushRef?.current) {\n      const updater: UpdateBrush = prevBrush => {\n        const newExtent = brushRef.current!.getExtent(\n          initialBrushPosition.start,\n          initialBrushPosition.end,\n        );\n\n        const newState: BaseBrushState = {\n          ...prevBrush,\n          start: { y: newExtent.y0, x: newExtent.x0 },\n          end: { y: newExtent.y1, x: newExtent.x1 },\n          extent: newExtent,\n        };\n\n        return newState;\n      };\n      brushRef.current.updateBrush(updater);\n    }\n  };\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        <LinearGradient id={GRADIENT_ID} from={background} to={background2} rotate={45} />\n        <rect x={0} y={0} width={width} height={height} fill={`url(#${GRADIENT_ID})`} rx={14} />\n        <AreaChart\n          hideBottomAxis={compact}\n          data={filteredStock}\n          width={width}\n          margin={{ ...margin, bottom: topChartBottomMargin }}\n          yMax={yMax}\n          xScale={dateScale}\n          yScale={stockScale}\n          gradientColor={background2}\n        />\n        <AreaChart\n          hideBottomAxis\n          hideLeftAxis\n          data={originStock}\n          width={width}\n          yMax={yBrushMax}\n          xScale={brushDateScale}\n          yScale={brushStockScale}\n          margin={brushMargin}\n          top={topChartHeight + topChartBottomMargin + margin.top}\n          gradientColor={background2}\n        >\n          <PatternLines\n            id={PATTERN_ID}\n            height={8}\n            width={8}\n            stroke={accentColor}\n            strokeWidth={1}\n            orientation={['diagonal']}\n          />\n          <Brush\n            xScale={brushDateScale}\n            yScale={brushStockScale}\n            width={xBrushMax}\n            height={yBrushMax}\n            margin={brushMargin}\n            handleSize={8}\n            innerRef={brushRef}\n            resizeTriggerAreas={['left', 'right']}\n            brushDirection=\"horizontal\"\n            initialBrushPosition={initialBrushPosition}\n            onChange={onBrushChange}\n            onClick={() => setFilteredStock(stock)}\n            selectedBoxStyle={selectedBrushStyle}\n          />\n        </AreaChart>\n      </svg>\n      <div>\n        <Button onClick={handleClearClick}>데이터 불러오기</Button>&nbsp;\n        <Button onClick={handleResetClick}>최근 데이터 선택</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default BrushChart;\n",["42","43"],"/app/src/AreaChart.tsx",["44"],"import React from 'react';\nimport { Group } from '@visx/group';\nimport { AreaClosed } from '@visx/shape';\nimport { AxisLeft, AxisBottom, AxisScale } from '@visx/axis';\nimport { LinearGradient } from '@visx/gradient';\nimport { curveMonotoneX } from '@visx/curve';\nimport { AppleStock } from '@visx/mock-data/lib/mocks/appleStock';\n// import {dto} from './data/data';\nimport {dto} from './dto';\n\n// Initialize some variables\nconst axisColor = '#fff';\nconst axisBottomTickLabelProps = {\n  textAnchor: 'middle' as const,\n  fontFamily: 'Arial',\n  fontSize: 10,\n  fill: axisColor,\n};\nconst axisLeftTickLabelProps = {\n  dx: '-0.25em',\n  dy: '0.25em',\n  fontFamily: 'Arial',\n  fontSize: 10,\n  textAnchor: 'end' as const,\n  fill: axisColor,\n};\n\n//accessors\n// const getDate = (d: AppleStock) => new Date(d.date);\n// const getStockValue = (d: AppleStock) => d.close;\nconst getStockValue = (d: dto) => d.close;\nconst getDate = (d: dto) => new Date(d.date);\n\nexport default function AreaChart({\n  data,\n  gradientColor,\n  width,\n  yMax,\n  margin,\n  xScale,\n  yScale,\n  hideBottomAxis = false,\n  hideLeftAxis = false,\n  top,\n  left,\n  children,\n}: {\n  // data: AppleStock[];\n  data: dto[];\n  gradientColor: string;\n  xScale: AxisScale<number>;\n  yScale: AxisScale<number>;\n  width: number;\n  yMax: number;\n  margin: { top: number; right: number; bottom: number; left: number };\n  hideBottomAxis?: boolean;\n  hideLeftAxis?: boolean;\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n}) {\n  if (width < 10) return null;\n  return (\n    <Group left={left || margin.left} top={top || margin.top}>\n      <LinearGradient\n        id=\"gradient\"\n        from={gradientColor}\n        fromOpacity={1}\n        to={gradientColor}\n        toOpacity={0.2}\n      />\n      {/* <AreaClosed<AppleStock> */}\n      <AreaClosed<dto>      \n        data={data}\n        x={d => xScale(getDate(d)) || 0}\n        y={d => yScale(getStockValue(d)) || 0}\n        yScale={yScale}\n        strokeWidth={1}\n        stroke=\"url(#gradient)\"\n        fill=\"url(#gradient)\"\n        curve={curveMonotoneX}\n      />\n      {!hideBottomAxis && (\n        <AxisBottom\n          top={yMax}\n          scale={xScale}\n          numTicks={width > 520 ? 10 : 5}\n          stroke={axisColor}\n          tickStroke={axisColor}\n          tickLabelProps={() => axisBottomTickLabelProps}\n        />\n      )}\n      {!hideLeftAxis && (\n        <AxisLeft\n          scale={yScale}\n          numTicks={5}\n          stroke={axisColor}\n          tickStroke={axisColor}\n          tickLabelProps={() => axisLeftTickLabelProps}\n        />\n      )}\n      {children}\n    </Group>\n  );\n}\n","/app/src/data/data.js",["45"],"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar data = [\n  {date: '2020-12-29T13:35:50.000Z', close: 10},\n  {date: '2020-12-28T13:35:50.000Z', close: 20},  \n  {date: '2020-12-27T10:35:50.000Z', close: 30},  \n  {date: '2020-12-26T10:35:50.000Z', close: 100},  \n  {date: '2020-12-25T12:35:50.000Z', close: 80},  \n  {date: '2020-12-24T09:35:50.000Z', close: 130},  \n  {date: '2020-12-23T13:35:50.000Z', close: 20},  \n  {date: '2020-12-22T13:50:50.000Z', close: 16},  \n  {date: '2020-12-21T11:50:50.000Z', close: 61},  \n  {date: '2020-12-20T12:35:50.000Z', close: 46},  \n  {date: '2020-12-19T13:35:50.000Z', close: 135},\n  {date: '2020-12-18T10:35:50.000Z', close: 200},\n  {date: '2020-12-17T12:35:50.000Z', close: 32},\n  {date: '2020-12-16T14:35:50.000Z', close: 68},\n  {date: '2020-12-15T11:35:50.000Z', close: 49},\n  {date: '2020-12-14T11:35:50.000Z', close: 76},\n  {date: '2020-12-13T13:35:50.000Z', close: 30},\n  {date: '2020-12-12T10:35:50.000Z', close: 22},\n  {date: '2020-12-11T13:35:50.000Z', close: 16},\n  {date: '2020-12-10T13:35:50.000Z', close: 55},\n  {date: '2020-12-09T10:35:50.000Z', close: 67},\n  {date: '2020-12-08T10:35:50.000Z', close: 32},\n  {date: '2020-12-07T12:35:50.000Z', close: 16},\n  {date: '2020-12-06T11:35:50.000Z', close: 95}\n]\n\nvar _default = data;\nexports.default = _default;\n\n",["46","47"],"/app/src/modal.tsx",["48","49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":3,"column":22,"nodeType":"56","messageId":"57","endLine":3,"endColumn":32},{"ruleId":"54","severity":1,"message":"58","line":11,"column":8,"nodeType":"56","messageId":"57","endLine":11,"endColumn":12},{"ruleId":"54","severity":1,"message":"59","line":37,"column":7,"nodeType":"56","messageId":"57","endLine":37,"endColumn":9},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":7,"column":10,"nodeType":"56","messageId":"57","endLine":7,"endColumn":20},{"ruleId":"60","severity":1,"message":"61","line":1,"column":1,"nodeType":"62","messageId":"63","endLine":1,"endColumn":14,"fix":"64"},{"ruleId":"50","replacedBy":"65"},{"ruleId":"52","replacedBy":"66"},{"ruleId":"54","severity":1,"message":"67","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":23},{"ruleId":"54","severity":1,"message":"68","line":1,"column":35,"nodeType":"56","messageId":"57","endLine":1,"endColumn":42},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"@typescript-eslint/no-unused-vars","'AppleStock' is defined but never used.","Identifier","unusedVar","'data' is defined but never used.","'dd' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"71","text":"72"},["69"],["70"],"'useRef' is defined but never used.","'useMemo' is defined but never used.","no-global-assign","no-unsafe-negation",[0,13],""]